name: bpfman-image-build

on: # yamllint disable-line rule:truthy
  push:
    branches: [main]
    tags:
      - v*

  pull_request:
    paths: [.github/workflows/image-build.yaml]

jobs:
  build-and-push-images:
    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        #arch:
        #  - arch: amd64
        #    rust-target: x86_64-unknown-linux-gnu
        #    filename: linux-x86_64
        #  - arch: arm64
        #    rust-target: aarch64-unknown-linux-gnu
        #    filename: linux-arm64
        # - arch: ppc64le
        # rust-target: powerpc64le-unknown-linux-gnu
        # filename: linux-ppc64le
        # - arch: s390x
        # rust-target: s390x-unknown-linux-gnu
        # filename: linux-s390x

        image:
          - registry: quay.io
            build_language: rust
            repository: bpfman
            image: bpfman-test
            dockerfile: ./Containerfile.bpfman
            context: .
            tags: |
              type=ref,event=branch
              type=ref,event=tag
              type=ref,event=pr
              type=sha,format=long
              # set latest tag for default branch
              type=raw,value=latest,enable={{is_default_branch}}

    name: Build Image (${{ matrix.image.image }})
    steps:
      - name: Checkout bpfman
        uses: actions/checkout@v4

      - name: Install Golang
        uses: actions/setup-go@v5
        if: ${{ matrix.image.build_language == 'go' }}
        with:
          # prettier-ignore
          go-version: '1.21' # yamllint disable-line rule:quoted-strings

      - uses: sigstore/cosign-installer@v3.5.0

      - name: Checkout libbpf
        uses: actions/checkout@v4
        if: ${{ matrix.image.bpf_build_wrapper == 'rust' }}
        with:
          repository: libbpf/libbpf
          path: libbpf

      - name: Install rust toolchain - stable
        uses: actions-rs/toolchain@v1
        if: ${{ matrix.image.build_language == 'rust' }}
        with:
          toolchain: stable
          override: true

      - name: Install libelf-dev
        if: ${{ matrix.image.bpf_build_wrapper == 'rust' || matrix.image.bpf_build_wrapper == 'go' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y linux-headers-`uname -r` clang lldb lld libelf-dev gcc-multilib libbpf-dev

      - name: Build rust wrapped eBPF
        if: ${{ matrix.image.bpf_build_wrapper == 'rust' }}
        run: |
          cargo xtask build-ebpf --libbpf-dir ./libbpf

      - name: Install bpf2go
        if: ${{ matrix.image.bpf_build_wrapper == 'go' }}
        run: |
          go install github.com/cilium/ebpf/cmd/bpf2go@v0.14.0

      - name: Generate go wrapped eBPF
        if: ${{ matrix.image.bpf_build_wrapper == 'go' }}
        run: |
          cd examples && make generate

      - name: Generate olm bundle on disk
        if: ${{ matrix.image.image == 'bpfman-operator-bundle' }}
        run: |
          cd bpfman-operator && make bundle

      - name: Login to quay.io/bpfman
        uses: redhat-actions/podman-login@v1
        if: ${{ github.event_name == 'push' && matrix.image.repository == 'bpfman'}}
        with:
          registry: ${{ matrix.image.registry }}
          username: ${{ secrets.BPFMAN_USERNAME }}
          password: ${{ secrets.BPFMAN_ROBOT_TOKEN }}

      - name: Login to quay.io/bpfman-userspace
        uses: redhat-actions/podman-login@v1
        if: ${{ github.event_name == 'push' && matrix.image.repository == 'bpfman-userspace'}}
        with:
          registry: ${{ matrix.image.registry }}
          username: ${{ secrets.BPFMAN_USERSPACE_USERNAME }}
          password: ${{ secrets.BPFMAN_USERSPACE_ROBOT_TOKEN }}

      - name: Login to quay.io/bpfman-bytecode
        uses: redhat-actions/podman-login@v1
        if: ${{ github.event_name == 'push' && matrix.image.repository == 'bpfman-bytecode' }}
        with:
          registry: ${{ matrix.image.registry }}
          username: ${{ secrets.BPFMAN_BYTECODE_USERNAME }}
          password: ${{ secrets.BPFMAN_BYTECODE_ROBOT_TOKEN }}

      - name: Extract metadata (tags, labels) for image
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ matrix.image.registry }}/${{ matrix.image.repository }}/${{ matrix.image.image }}
          tags: ${{ matrix.image.tags }}

      - name: Create and push Manifest
        continue-on-error: true
        run: |
          DOCKER_BUILDKIT=1 docker manifest create ${{ matrix.image.image }}:${{ steps.meta.outputs.tags }}

      - name: Build image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          archs: amd64, ppc64le
          image: ${{ matrix.image.image }}
          tags: ${{ steps.meta.outputs.tags }}
          #tags: ${{ steps.meta.outputs.tags }}-${{ matrix.arch.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          containerfiles: ${{ matrix.image.dockerfile }}
          build-args: |
            ${{ matrix.image.build_args }}
          #  RUSTTARGET=${{ matrix.arch.rust-target }}
          #  TARGETPLATFORM=linux/${{ matrix.arch.arch }}
          context: ${{ matrix.image.context }}

      ### - name: Push to registry
      ###   id: push-image
      ###   uses: redhat-actions/push-to-registry@v2
      ###   if: ${{ github.event_name == 'push' }}
      ###   with:
      ###     tags: ${{ steps.meta.outputs.tags }}

      ### - name: Sign the images with GitHub OIDC Token
      ###   if: ${{ github.event_name == 'push' }}
      ###   run: |
      ###     readarray -t tags <<<"${{ steps.meta.outputs.tags }}"
      ###     for tag in ${tags[@]}; do
      ###       cosign sign -y "${tag}@${{ steps.push-image.outputs.digest }}"
      ###     done

      #- name: Add Image to Manifest and Push
      #  run: |
      #    DOCKER_BUILDKIT=1 docker manifest add ${{ matrix.image.image }}:${{ steps.meta.outputs.tags }} ${{ matrix.image.image }}:${{ steps.meta.outputs.tags }}-${{ matrix.arch.arch }}
      #    DOCKER_BUILDKIT=1 docker manifest push ${{ matrix.image.image }}:${{ steps.meta.outputs.tags }}
